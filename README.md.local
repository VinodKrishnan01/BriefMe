# Brief Generator Backend

Flask API server with Swagger documentation for generating structured briefs using Google Gemini.

## Features

- **RESTful API** with full Swagger documentation
- **Google Gemini Integration** for LLM-powered brief generation
- **Firestore Database** for persistent storage
- **Duplicate Detection** using SHA256 hashing
- **Session-based Data Isolation** using client session IDs
- **Comprehensive Error Handling** with retry mechanisms
- **CORS Support** for frontend integration

## API Endpoints

### Base URL: `http://localhost:5000/api`

### Endpoints:
- `POST /briefs` - Create a new brief from source text
- `GET /briefs` - Get recent briefs for a client session
- `GET /briefs/{id}` - Get a specific brief by ID
- `DELETE /briefs/{id}` - Delete a specific brief

### Documentation:
- **Swagger UI**: `http://localhost:5000/api/docs/`
- **Health Check**: `http://localhost:5000/health`

## Setup Instructions

### 1. Prerequisites
- Python 3.8+
- Google Cloud Project with Firestore enabled
- Google Gemini API key
- Service account JSON file

### 2. Installation

```bash
# Navigate to server directory
cd server

# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

### 3. Environment Configuration

Copy `.env.example` to `.env` and fill in your values:

```bash
cp .env.example .env
```

Edit `.env` file:
```env
GEMINI_API_KEY=your_gemini_api_key_here
GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json
GCP_PROJECT_ID=your_project_id_here
FLASK_ENV=development
FLASK_DEBUG=True
FLASK_PORT=5000
```

### 4. GCP Setup

1. Place your service account JSON file in the server directory as `service-account-key.json`
2. Ensure Firestore is enabled in your GCP project
3. Verify the service account has `Cloud Datastore User` role

### 5. Run the Server

```bash
# Make sure virtual environment is activated
# venv\Scripts\activate  # Windows
# source venv/bin/activate  # macOS/Linux

# Run the development server
python app.py
```

The server will start on `http://localhost:5000`

### 6. Test the API

Visit `http://localhost:5000/api/docs/` for interactive Swagger documentation.

## Project Structure

```
server/
├── app.py                 # Main Flask application
├── requirements.txt       # Python dependencies
├── .env.example          # Environment variables template
├── .env                  # Environment variables (create this)
├── service-account-key.json  # GCP service account (add this)
├── models/
│   └── schemas.py        # Data validation schemas
├── routes/
│   └── briefs.py         # API routes for briefs
├── services/
│   ├── firestore_service.py  # Firestore database operations
│   └── gemini_service.py     # Gemini LLM integration
└── utils/
    ├── config.py         # Configuration management
    └── helpers.py        # Utility functions
```

## Environment Variables

| Variable | Description | Required |
|----------|-------------|----------|
| `GEMINI_API_KEY` | Google Gemini API key | Yes |
| `GOOGLE_APPLICATION_CREDENTIALS` | Path to service account JSON | Yes |
| `GCP_PROJECT_ID` | Google Cloud Project ID | Yes |
| `FLASK_ENV` | Flask environment (development/production) | No |
| `FLASK_DEBUG` | Enable debug mode (True/False) | No |
| `FLASK_PORT` | Port to run the server on | No |

## API Usage Examples

### Create a Brief

```bash
curl -X POST "http://localhost:5000/api/briefs" \
  -H "Content-Type: application/json" \
  -d '{
    "source_text": "Your text to analyze here...",
    "client_session_id": "your-uuid-here"
  }'
```

### Get Recent Briefs

```bash
curl "http://localhost:5000/api/briefs?client_session_id=your-uuid-here&limit=10"
```

### Get Specific Brief

```bash
curl "http://localhost:5000/api/briefs/{brief-id}?client_session_id=your-uuid-here"
```

### Delete Brief

```bash
curl -X DELETE "http://localhost:5000/api/briefs/{brief-id}?client_session_id=your-uuid-here"
```

## Error Handling

The API includes comprehensive error handling:

- **Validation Errors**: 400 status with detailed error messages
- **Authorization Errors**: 404 status for unauthorized access attempts
- **LLM Failures**: Automatic retry with fallback error responses
- **Database Errors**: 500 status with sanitized error messages

## Security Features

- **Session Isolation**: All operations require valid client session ID
- **Input Validation**: Comprehensive validation using Marshmallow schemas
- **Environment Variables**: Sensitive data stored in environment variables
- **CORS Configuration**: Restricted to frontend development server

## Development

### Adding New Endpoints

1. Create new route handlers in `routes/`
2. Add validation schemas in `models/schemas.py`
3. Register the namespace in `app.py`

### Adding New Services

1. Create service classes in `services/`
2. Follow the existing pattern for error handling
3. Add comprehensive logging

## Troubleshooting

### Common Issues

1. **Import Errors**: Ensure virtual environment is activated and dependencies installed
2. **GCP Authentication**: Check service account file path and permissions
3. **Firestore Connection**: Verify project ID and Firestore is enabled
4. **Gemini API**: Confirm API key is valid and has proper quotas

### Logs

The application logs all operations with timestamps. Check console output for debugging information.
