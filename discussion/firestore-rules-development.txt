// Firestore Security Rules for Brief Generator (Development with Validation)
// Copy and paste these rules into the Firebase Console → Firestore → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Custom function to validate client session ID format (UUID)
    function isValidClientSessionId(sessionId) {
      return sessionId is string && 
             sessionId.size() == 36 && 
             sessionId.matches('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
    }
    
    // Custom function to validate brief data structure
    function isValidBriefData(data) {
      return data.keys().hasAll(['client_session_id', 'source_text', 'summary', 'decisions', 'actions', 'questions', 'sha256', 'created_at']) &&
             data.client_session_id is string &&
             data.source_text is string &&
             data.source_text.size() > 0 &&
             data.source_text.size() <= 10000 &&
             data.summary is string &&
             data.decisions is list &&
             data.actions is list &&
             data.questions is list &&
             data.sha256 is string &&
             data.created_at is timestamp;
    }
    
    // Custom function to validate action item structure
    function isValidAction(action) {
      return action is map &&
             'text' in action &&
             action.text is string &&
             action.text.size() > 0 &&
             (action.keys().hasOnly(['text']) ||
              action.keys().hasOnly(['text', 'owner']) ||
              action.keys().hasOnly(['text', 'due_date']) ||
              action.keys().hasOnly(['text', 'owner', 'due_date']));
    }
    
    // Custom function to validate all actions in the list
    function areValidActions(actions) {
      return actions.size() <= 100 && // Reasonable limit
             actions.hasOnly(isValidAction);
    }
    
    // Rules for briefs collection
    match /briefs/{briefId} {
      // Allow read if the brief belongs to the requesting client session
      allow read: if request.auth == null && // No authentication required for development
                     resource.data.client_session_id is string &&
                     isValidClientSessionId(resource.data.client_session_id);
      
      // Allow create with proper data validation
      allow create: if request.auth == null && // No authentication required for development
                       request.resource.data != null &&
                       isValidBriefData(request.resource.data) &&
                       isValidClientSessionId(request.resource.data.client_session_id) &&
                       areValidActions(request.resource.data.actions) &&
                       request.resource.data.decisions.size() <= 100 && // Reasonable limit
                       request.resource.data.questions.size() <= 100; // Reasonable limit
      
      // Allow update only for the same client session (not typically used in our app)
      allow update: if request.auth == null && // No authentication required for development
                       resource.data.client_session_id == request.resource.data.client_session_id &&
                       isValidClientSessionId(resource.data.client_session_id) &&
                       isValidBriefData(request.resource.data) &&
                       areValidActions(request.resource.data.actions);
      
      // Allow delete only for the same client session
      allow delete: if request.auth == null && // No authentication required for development
                       resource.data.client_session_id is string &&
                       isValidClientSessionId(resource.data.client_session_id);
    }
    
    // Deny access to all other collections and documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ENHANCED SECURITY FEATURES:
// 1. Validates client session ID format (UUID)
// 2. Validates brief data structure and required fields
// 3. Enforces text length limits (1-10,000 characters)
// 4. Validates action item structure
// 5. Prevents unauthorized access between different client sessions
// 6. Sets reasonable limits on array sizes
// 7. Ensures proper data types for all fields
// 8. Still allows development without authentication

// DEVELOPMENT NOTES:
// - No authentication required (request.auth == null check)
// - Data validation ensures data integrity
// - Session isolation prevents cross-session data access
// - Ready for production authentication when needed

// PRODUCTION MIGRATION:
// To migrate to production, replace "request.auth == null" conditions with proper authentication:
// - request.auth != null && request.auth.uid == resource.data.user_id
